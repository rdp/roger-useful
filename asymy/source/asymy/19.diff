diff --git a/asymy.rb b/asymy.rb
index 5813f4c..76b7b11 100644
--- a/asymy.rb
+++ b/asymy.rb
@@ -1,5 +1,4 @@
-require 'util'
-require 'constants'
-require 'messages'
-require 'connection'
+for file in ['util', 'constants', 'messages', 'connection'] do
+ require File.dirname(__FILE__) + '/' + file
+end
 
diff --git a/connection.rb b/connection.rb
index e4fe878..0853a80 100644
--- a/connection.rb
+++ b/connection.rb
@@ -1,4 +1,4 @@
-require 'asymy'
+require File.dirname(__FILE__) + '/asymy'
 require 'stringio'
 
 # XXX for debugging
@@ -19,7 +19,7 @@ class String
             sio.write(("0" * (8 - (x = off.to_s(16)).size)) + x + "  ")
 
             0.upto(15-pad) do |i|
-                c = self[off]
+                c = self[off].assure_int
                 x = c.to_s(16)
                 sio.write(("0" * (2 - x.size)) + x + " ")
                 if c.printable?
@@ -117,11 +117,10 @@ module Asymy
             def receive_packet(num, packet)
                 # special case errors until I waste the time to scan them to see if they're
                 # 4.0 or 4.1 packets. XXX
-                if packet[0] == 0xFF
+                if packet[0].assure_int == 0xFF
                     self.error = packet[3..-1]
                     self.state = :error
                 end
-
                 case self.state
                 when :preauth
                     handle_preauth(num, Packets::Greeting.new(packet))
@@ -142,13 +141,13 @@ module Asymy
                     # XXX just ignore for now
                     self.state = :awaiting_fields
                 when :awaiting_fields
-                    if packet[0] == 0xfe
+                    if packet[0].assure_int == 0xfe
                         self.state = :awaiting_rows
                     else
                         handle_field(num, Packets::Field.new(packet))
                     end
                 when :awaiting_rows
-                    if packet[0] == 0xfe
+                    if packet[0].assure_int == 0xfe
                         @cb.call(@fields, @rows)
                         @fields = nil
                         @rows = nil
diff --git a/messages.rb b/messages.rb
index a9d3c6b..c1c9e08 100644
--- a/messages.rb
+++ b/messages.rb
@@ -1,4 +1,4 @@
-require 'asymy'
+require File.dirname(__FILE__) + '/asymy'
 
 module Asymy
     class Framer < String
@@ -12,7 +12,7 @@ module Asymy
         
         def next_buffer
             sz = shift_l24()
-            num = slice!(0)
+            num = slice!(0).assure_int
             return num, slice!(0, sz).extend(StringX)
         end        
     end    
@@ -30,9 +30,11 @@ module Asymy
                     @@fields[self.class].each do |tup|
                         sym = "@#{ tup[0] }".intern
                         if (t = tup[1].to_s)[0].chr == "r"
-                            instance_variable_set sym, buf.shift_r(t[1..-1].to_i)
+				                    to_this = buf.shift_r(t[1..-1].to_i) # ???
+                            instance_variable_set sym, to_this
                         else
-                            instance_variable_set sym, buf.send("shift_#{ t }")
+				                    to_this = buf.send("shift_#{ t }")
+                            instance_variable_set sym, to_this
                         end
                     end 
                 else
diff --git a/util.rb b/util.rb
index be10a0e..5796c82 100644
--- a/util.rb
+++ b/util.rb
@@ -1,3 +1,24 @@
+require 'openssl'
+
+# 1.9 compat stuff
+class String
+  if RUBY_VERSION[0..2] == '1.9'
+    def assure_int
+	    self.getbyte 0
+    end
+  else
+    # should be unneeded for 1.8.6
+  end
+end
+
+class Fixnum
+  def assure_int
+	  #already is
+	  self
+  end
+end
+
+
 class Numeric
     def to_lcb_int
         case self
@@ -24,14 +45,14 @@ module Asymy
         def crypt(nonce)
             sha = lambda {|k| OpenSSL::Digest::SHA1.new(k).digest }
             h3 = sha.call(nonce + sha.call((h1 = sha.call(self))))
-            (0...h3.size).map {|i| (h3[i] ^ h1[i]).chr }.join("").extend(StringX)
+            (0...h3.size).map {|i| ((h3[i].assure_int) ^ (h1[i].assure_int)).chr }.join("").extend(StringX)
         end
 
         def to_lcb_int(sz=false)
             s = 1
-            case self[0]
+            case self[0].assure_int
             when 0..250
-                r = self[0]
+                r = self[0].assure_int
             when 251
                 r = :null
             when 252
@@ -60,7 +81,7 @@ module Asymy
         def to_l24; (self[0,3] + "\x00").unpack("L").first; end # XXX cheat
 
         def shift_lcb_int
-            case (x = slice!(0))
+            case (x = slice!(0).assure_int)
             when 0..250
                 x
             when 251
@@ -76,7 +97,7 @@ module Asymy
             end
         end
 
-        def shift_l8; slice!(0); end
+        def shift_l8; slice!(0).assure_int; end
         def shift_l16; slice!(0...2).extend(StringX).to_l16; end
         def shift_l24; slice!(0...3).extend(StringX).to_l24; end
         def shift_l32; slice!(0...4).extend(StringX).to_l32; end
